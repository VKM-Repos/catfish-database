import { forwardRef, InputHTMLAttributes, useState } from 'react'
import { useFormContext } from 'react-hook-form'
import { FormControl, FormField, FormItem, FormLabel, FormMessage } from 'src/components/ui/form'
import { Input } from 'src/components/ui/input'

interface InputProps extends InputHTMLAttributes<HTMLInputElement> {
  name: string
  label?: string
  className?: string
  disabled?: boolean
  readOnly?: boolean
}

const FormInput = forwardRef<HTMLInputElement, InputProps>(
  ({ name, label, className, disabled, readOnly, ...rest }, ref) => {
    const [isPasswordVisible, setPasswordVisibility] = useState(false)
    const {
      control,
      formState: { errors },
    } = useFormContext()
    const error = errors[name]

    const { type, required } = rest

    return (
      <FormField
        control={control}
        name={name}
        render={({ field }) => {
          const { value, onChange } = field
          return (
            <FormItem className="flex flex-col gap-0">
              <FormLabel className="font-md mt-2 flex gap-0">
                {label}
                {required && (
                  <span className="text-error text-red-500" title="required">
                    &ensp;*
                  </span>
                )}
              </FormLabel>
              <FormControl>
                <div className="relative">
                  <Input
                    {...field}
                    ref={ref}
                    type={type === 'password' ? (isPasswordVisible ? 'text' : 'password') : type}
                    placeholder={rest.placeholder}
                    onChange={onChange}
                    value={value ?? ''}
                    className={`rounded-[4px] px-3 py-2 font-medium focus-visible:ring-0 ${
                      error ? 'border-red-500 bg-error-100' : 'border-neutral-200'
                    }  placeholder:text-black/30 ${className}`}
                    disabled={disabled}
                    readOnly={readOnly}
                    autoComplete="on"
                  />
                  {rest.type === 'email' && (
                    <div
                      className={`absolute right-4 top-1/2 -translate-y-1/2 transform cursor-pointer${
                        error ? 'border-red-500' : 'border-neutral-200'
                      }`}
                    >
                      <div className={`${error ? 'text-error-500' : 'text-[#444955]'}`}>
                        <svg width="20" height="21" viewBox="0 0 20 21" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path
                            fillRule="evenodd"
                            clipRule="evenodd"
                            d="M8.2864 3.31162H11.7138C13.2452 3.3116 14.4583 3.31159 15.4076 3.43923C16.3846 3.57058 17.1754 3.84735 17.799 4.47098C18.4227 5.09462 18.6994 5.88541 18.8308 6.86243C18.9584 7.81178 18.9584 9.02481 18.9584 10.5563V10.6503C18.9584 12.1818 18.9584 13.3948 18.8308 14.3441C18.6994 15.3212 18.4227 16.1119 17.799 16.7356C17.1754 17.3592 16.3846 17.636 15.4076 17.7673C14.4583 17.895 13.2452 17.895 11.7138 17.8949H8.28641C6.75494 17.895 5.54191 17.895 4.59256 17.7673C3.61554 17.636 2.82475 17.3592 2.20112 16.7356C1.57748 16.1119 1.30072 15.3212 1.16936 14.3441C1.04172 13.3948 1.04174 12.1818 1.04175 10.6503V10.5563C1.04174 9.0248 1.04172 7.81177 1.16936 6.86243C1.30072 5.88541 1.57748 5.09462 2.20112 4.47098C2.82475 3.84735 3.61554 3.57058 4.59256 3.43923C5.54191 3.31159 6.75493 3.3116 8.2864 3.31162ZM4.75912 4.67808C3.92071 4.7908 3.43768 5.00219 3.085 5.35487C2.73233 5.70754 2.52094 6.19058 2.40821 7.02899C2.29308 7.88538 2.29175 9.01427 2.29175 10.6033C2.29175 12.1923 2.29308 13.3212 2.40821 14.1776C2.52094 15.016 2.73233 15.499 3.085 15.8517C3.43768 16.2044 3.92071 16.4158 4.75912 16.5285C5.61551 16.6436 6.7444 16.6449 8.33341 16.6449H11.6667C13.2558 16.6449 14.3847 16.6436 15.241 16.5285C16.0794 16.4158 16.5625 16.2044 16.9152 15.8517C17.2678 15.499 17.4792 15.016 17.5919 14.1776C17.7071 13.3212 17.7084 12.1923 17.7084 10.6033C17.7084 9.01427 17.7071 7.88538 17.5919 7.02899C17.4792 6.19058 17.2678 5.70754 16.9152 5.35487C16.5625 5.00219 16.0794 4.7908 15.241 4.67808C14.3847 4.56294 13.2558 4.56162 11.6667 4.56162H8.33342C6.7444 4.56162 5.61551 4.56294 4.75912 4.67808ZM4.51994 6.86983C4.74092 6.60466 5.13502 6.56883 5.4002 6.78981L7.19928 8.28904C7.97674 8.93693 8.51652 9.38529 8.97223 9.67839C9.41337 9.96211 9.71252 10.0573 10.0001 10.0573C10.2876 10.0573 10.5868 9.96211 11.0279 9.67839C11.4836 9.38529 12.0234 8.93693 12.8009 8.28904L14.6 6.78981C14.8651 6.56883 15.2592 6.60466 15.4802 6.86983C15.7012 7.13501 15.6654 7.52911 15.4002 7.75009L13.5698 9.27543C12.8312 9.89097 12.2325 10.3899 11.7041 10.7297C11.1537 11.0837 10.6176 11.3073 10.0001 11.3073C9.38252 11.3073 8.84648 11.0837 8.29606 10.7297C7.76768 10.3899 7.16901 9.89098 6.43038 9.27543L4.59997 7.75009C4.33479 7.52911 4.29897 7.13501 4.51994 6.86983Z"
                            fill="currentColor"
                          />
                        </svg>
                      </div>
                    </div>
                  )}
                  {rest.type === 'password' && (
                    <div
                      className={`absolute right-4 top-1/2 -translate-y-1/2 transform cursor-pointer${
                        error ? ' border-red-500 text-error-500' : 'border-neutral-200 text-neutral-200'
                      }`}
                      onClick={() => setPasswordVisibility(!isPasswordVisible)}
                    >
                      {isPasswordVisible ? (
                        <div className={`${error ? 'text-error-500' : 'text-[#444955]'}`}>
                          <svg
                            width="16"
                            height="17"
                            viewBox="0 0 16 17"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              fillRule="evenodd"
                              clipRule="evenodd"
                              d="M1.714 9.3584L2.18933 9.67573L2.192 9.67173C2.21903 9.63139 2.24749 9.59204 2.27733 9.55373C2.34067 9.46973 2.43733 9.34573 2.56667 9.19573C2.91453 8.793 3.29858 8.42301 3.714 8.0904C4.72133 7.2844 6.17067 6.50107 8 6.50107C9.82933 6.50107 11.2787 7.2844 12.286 8.0904C12.7012 8.42304 13.085 8.79303 13.4327 9.19573C13.5647 9.34883 13.6899 9.50765 13.808 9.67173L13.8107 9.67573L14.286 9.3584C14.7613 9.04173 14.7613 9.04106 14.7607 9.04106L14.76 9.03973L14.7573 9.03573L14.7507 9.02573C14.7144 8.97223 14.6766 8.91977 14.6373 8.8684C14.5593 8.76507 14.4467 8.62173 14.2993 8.44973C13.9052 7.9935 13.4701 7.5744 12.9993 7.19773C11.8653 6.28973 10.1713 5.3584 8 5.3584C5.82933 5.3584 4.13533 6.28973 3 7.1984C2.52954 7.5749 2.09461 7.99377 1.70067 8.44973C1.54158 8.6348 1.39098 8.827 1.24933 9.02573L1.24267 9.03573L1.24 9.03906V9.0404L1.23933 9.04106L1.714 9.3584ZM8 11.0724C8.22509 11.0724 8.44797 11.0281 8.65592 10.9419C8.86387 10.8558 9.05282 10.7295 9.21198 10.5704C9.37114 10.4112 9.49739 10.2223 9.58353 10.0143C9.66967 9.80637 9.714 9.58348 9.714 9.3584C9.714 9.13331 9.66967 8.91043 9.58353 8.70248C9.49739 8.49453 9.37114 8.30558 9.21198 8.14642C9.05282 7.98726 8.86387 7.86101 8.65592 7.77487C8.44797 7.68873 8.22509 7.6444 8 7.6444C7.54533 7.6444 7.10928 7.82502 6.78778 8.14652C6.46628 8.46802 6.28567 8.90406 6.28567 9.35873C6.28567 9.8134 6.46628 10.2494 6.78778 10.5709C7.10928 10.8924 7.54533 11.0731 8 11.0731V11.0724Z"
                              fill="currentColor"
                            />
                          </svg>
                        </div>
                      ) : (
                        <div className={`${error ? 'text-error-500' : 'text-[#444955]'}`}>
                          <svg
                            width="20"
                            height="21"
                            viewBox="0 0 20 21"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              fillRule="evenodd"
                              clipRule="evenodd"
                              d="M18.5795 5.86213C18.8968 5.9981 19.0438 6.36552 18.9078 6.68279L18.3334 6.43659C18.9078 6.68279 18.9079 6.68264 18.9078 6.68279L18.9072 6.68419L18.9063 6.68626L18.9037 6.69239L18.8948 6.71246C18.8873 6.72924 18.8766 6.75275 18.8628 6.78249C18.835 6.84195 18.7945 6.92638 18.7407 7.03172C18.6334 7.24226 18.473 7.53716 18.2571 7.88365C17.9024 8.45285 17.3937 9.16797 16.7184 9.87841L17.5253 10.6853C17.7694 10.9294 17.7694 11.3252 17.5253 11.5692C17.2812 11.8133 16.8855 11.8133 16.6414 11.5692L15.8076 10.7354C15.2579 11.196 14.6274 11.6283 13.9126 11.9834L14.6905 13.1791C14.8788 13.4684 14.7969 13.8555 14.5076 14.0438C14.2182 14.232 13.8311 14.1501 13.6428 13.8608L12.7352 12.4659C12.0857 12.678 11.3826 12.8221 10.625 12.8738V14.3533C10.625 14.6984 10.3452 14.9783 10 14.9783C9.65484 14.9783 9.37502 14.6984 9.37502 14.3533V12.8738C8.64083 12.8237 7.95766 12.6868 7.32493 12.4853L6.42987 13.8608C6.24162 14.1502 5.85447 14.2321 5.56514 14.0438C5.27582 13.8556 5.19389 13.4684 5.38214 13.1791L6.14249 12.0106C5.42217 11.6588 4.78659 11.2284 4.2321 10.7685L3.43128 11.5693C3.18721 11.8134 2.79148 11.8134 2.5474 11.5693C2.30332 11.3252 2.30332 10.9295 2.5474 10.6854L3.3172 9.9156C2.63007 9.19919 2.11279 8.47539 1.75239 7.89881C1.53328 7.54829 1.37058 7.24963 1.26165 7.03633C1.20715 6.92961 1.166 6.84405 1.13789 6.78379C1.12383 6.75365 1.11302 6.72983 1.10543 6.71283L1.09643 6.6925L1.09373 6.6863L1.09283 6.6842L1.09249 6.68341C1.09242 6.68326 1.09222 6.68279 1.66668 6.43659L1.09249 6.68341C0.956513 6.36614 1.10322 5.9981 1.42048 5.86213C1.73749 5.72627 2.10457 5.87288 2.24081 6.18961C2.24077 6.1895 2.24086 6.18972 2.24081 6.18961L2.24161 6.19144L2.24667 6.20286C2.25158 6.21386 2.25958 6.23151 2.27069 6.25532C2.29291 6.30296 2.32755 6.37513 2.37488 6.46782C2.46963 6.65334 2.61476 6.92015 2.81235 7.23626C3.20869 7.87032 3.80972 8.6925 4.62975 9.45459C5.35134 10.1252 6.23557 10.7429 7.29312 11.1498C8.08853 11.4558 8.98789 11.6449 10 11.6449C11.0348 11.6449 11.9518 11.4472 12.7604 11.1289C13.8116 10.7152 14.6898 10.0935 15.4056 9.42158C16.2136 8.66323 16.8058 7.84922 17.1962 7.2226C17.3909 6.91018 17.5339 6.64681 17.6272 6.46382C17.6738 6.37239 17.7079 6.30123 17.7298 6.2543C17.7408 6.23084 17.7486 6.21345 17.7535 6.20263L17.7584 6.19139L17.7589 6.19039C17.7589 6.19047 17.7589 6.19031 17.7589 6.19039M18.5795 5.86213C18.2624 5.72619 17.8949 5.87329 17.7589 6.19039L18.5795 5.86213ZM2.24081 6.18961C2.24077 6.1895 2.24086 6.18972 2.24081 6.18961V6.18961Z"
                              fill="currentColor"
                            />
                          </svg>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              </FormControl>
              <FormMessage />
            </FormItem>
          )
        }}
      />
    )
  },
)

FormInput.displayName = 'FormInput'
export default FormInput
